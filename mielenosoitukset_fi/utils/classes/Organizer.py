from bson import ObjectId
from .BaseModel import BaseModel
from mielenosoitukset_fi.utils.database import get_database_manager
from flask import url_for
from typing import Dict, Optional

DB = get_database_manager()


class BaseEntity(BaseModel):
    """Base class for shared attributes for any entity."""

    def __init__(self, name: str, email: str, website: Optional[str] = None, _id: Optional[ObjectId] = None):
        """
        Initialize a base entity.

        Parameters
        ----------
        name : str
            Name of the entity (person or organization).
        email : str
            Contact email.
        website : str, optional
            Website URL.
        _id : ObjectId, optional
            MongoDB ObjectId, autogenerated if not provided.
        """
        self.name = name
        self.email = email
        self.website = website
        self._id = _id or ObjectId()

    def to_dict(self, json: bool = False) -> dict:
        """
        Convert the entity to a dictionary.

        Parameters
        ----------
        json : bool, optional
            Whether to return a JSON-serializable dictionary (default is False).

        Returns
        -------
        dict
            Dictionary representation of the entity.
        """
        data = super().to_dict(json)
        return data


class Organizer(BaseEntity):
    """Represents an individual organizer, optionally linked to an organization."""

    def __init__(
        self,
        name: Optional[str] = None,
        email: Optional[str] = None,
        organization_id: Optional[ObjectId] = None,
        website: Optional[str] = None,
        url: Optional[str] = None,
        _id: Optional[ObjectId] = None,
    ):
        """
        Initialize an Organizer.

        Parameters
        ----------
        name : str, optional
        email : str, optional
        organization_id : ObjectId, optional
            If provided, fetches organization info.
        website : str, optional
        url : str, optional
            Public URL for this organizer.
        _id : ObjectId, optional
        """
        super().__init__(name, email, website, _id)
        self.organization_id = organization_id
        self.url = url

        if organization_id:
            self.fetch_organization_details()

    def fetch_organization_details(self):
        """Populate organizer's info from the linked organization."""
        if not self.organization_id:
            return

        organization = DB["organizations"].find_one({"_id": self.organization_id})
        if organization:
            self.name = organization.get("name")
            self.email = organization.get("email")
            self.website = organization.get("website")
            try:
                self.url = url_for("org", org_id=str(self.organization_id))
            except RuntimeError:
                # fallback if not in request context
                self.url = f"/org/{self.organization_id}"

    def validate_organization_id(self) -> bool:
        """Check if the linked organization exists in the database."""
        if not self.organization_id:
            return False
        return bool(DB["organizations"].find_one({"_id": self.organization_id}))


class OrganizingEntity(BaseEntity):
    """
    Represents an entity organizing a demonstration or event.
    Can be either an individual or an organization.
    
    Coming in version v4.5.0.
    """

    VALID_ENTITY_TYPES = {"individual", "organization"}

    def __init__(
        self,
        entity_type: str,
        reference_id: Optional[ObjectId] = None,
        name: Optional[str] = None,
        email: Optional[str] = None,
        website: Optional[str] = None,
        social_media_links: Optional[Dict[str, str]] = None,
        logo: Optional[str] = None,
        _id: Optional[ObjectId] = None,
    ):
        """
        Initialize an OrganizingEntity.

        Parameters
        ----------
        entity_type : str
            Must be 'individual' or 'organization'.
        reference_id : ObjectId, optional
            Reference to Organization in DB if type is 'organization'.
        name : str, optional
        email : str, optional
        website : str, optional
        social_media_links : dict, optional
        logo : str, optional
            Future support for logo or profile image.
        _id : ObjectId, optional
        """
        super().__init__(name, email, website, _id)
        self.entype = entity_type
        self.reference_id = reference_id
        self.social_media_links = social_media_links or {}
        self.logo = logo

        if self.entype not in self.VALID_ENTITY_TYPES:
            raise ValueError(f"Invalid entity_type: {self.entype}. Must be one of {self.VALID_ENTITY_TYPES}")

        if self.entype == "organization" and self.reference_id:
            # fetch organization data if available
            org_data = DB["organizations"].find_one({"_id": self.reference_id})
            if org_data:
                self.name = org_data.get("name", self.name)
                self.email = org_data.get("email", self.email)
                self.website = org_data.get("website", self.website)
                self.social_media_links = org_data.get("social_media_links", self.social_media_links)
                self.logo = org_data.get("logo", self.logo)

    def to_dict(self, json: bool = False) -> dict:
        """Convert the organizing entity to a dictionary."""
        data = super().to_dict(json)
        data.update({
            "type": self.entype,
            "reference_id": str(self.reference_id) if self.reference_id else None,
            "social_media_links": self.social_media_links,
            "logo": self.logo,
        })
        return data
